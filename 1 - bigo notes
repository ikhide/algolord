What is Big O notation?

- This talks about how long(number of operations) an algorithm takes to run
- How well an algorithm solves a problem

BigO calculation

1 Linear time - O(n)
    This is when the runtime for a function to run increases
    linearly with number of input

2. Constant time - O(1)
  
    This is when runtime takes same time to run an
    algorithm e.g
        function constant(array){
            console.log(array[0])
        }
    No matter the size of the array, the function will run with same number of operations.

        ex
        let array = [0,1,2,3,4]
        function constant(array){
            console.log(array[0])  O(1)
            console.log(array[1])  O(1)
        }

        constant(array)   // The big O is  == O(1+1)
                          // == O(2)

3. Quadratic - O(n^2)
    A loop inside another
    
4. Factorial - O(n!) 
    when you add a new loop for every element


Rules of BigO
1. Worst Case:
    Always assume a loop will run its complete circle
2. Remove Constants: 
    After calculating BigO of a function, remove all constants

    O(n/2+ 10001)  === O(n)
    O(2n) === O(n)
3. Different terms for inputs:
    function compare(box1,box2){
        box1.forEach(function(boxes){
            ...
        })
         box2.forEach(function(boxes){
            ...
        })
    }
    because the above function is iterating through different arrays
    with independent lengths, the bigO is O(n+m)

    if they are nested in a quadratic form, it will be
    O(n*m)

4. Drop Non Dominants:
    keep the big O with the higher power
    ex O(n+n^2) = O(n^2)


    PILLARS OF PROGRAMMING
    1. Readable
    2. Memory (Space Complexity)
    3. Speed (Time Complexity)

    For a lot of programming solutions, there is usually a tradeoff
    between Space and Speed. If you want it to go faster, you use more
    memory.

    What causes space Complexity
    - Variables
    - Data structures
    - Function calls
    - Allocations


